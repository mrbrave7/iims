"use client";
import { I_Certifications } from "@/models/certification.model";
import { useState, FormEvent } from "react";
import { PiCalendar, PiCertificate, PiLink, PiNote, PiSignature, PiStudent, PiTextbox } from "react-icons/pi";

interface AddCertificationFormProps {
  handleAddCertificationDetails: (data: I_Certifications) => void;
}

export default function AddCertificationForm({ 
  handleAddCertificationDetails 
}: AddCertificationFormProps): React.ReactElement {
  const [certificationDetail, setCertificationDetail] = useState<Omit<I_Certifications, '_id'>>({
    recipientName: "",
    certificationTitle: "",
    programeName: "",
    issuedOrganization: "",
    certificateId: "",
    authoritySignature: "",
    completionCriteria: "",
    durationOfTrainingInWeeks: 0,
    certificationScore: 0,
    verificationLink: "",
    certificateFileurl: "",
    issuedDate: new Date(),
    specialMessage: "",
  });

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    handleAddCertificationDetails({
      ...certificationDetail,
      _id: "" // Will be generated by your backend
    });
  };

  const handleChange = <K extends keyof I_Certifications>(
    field: K,
    value: I_Certifications[K]
  ) => {
    setCertificationDetail(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleDateChange = (dateString: string) => {
    const date = dateString ? new Date(dateString) : new Date();
    if (!isNaN(date.getTime())) {
      handleChange("issuedDate", date);
    }
  };

  const formatDateForInput = (date: Date) => {
    if (!date || !(date instanceof Date) || isNaN(date.getTime())) {
      return new Date().toISOString().split('T')[0];
    }
    return date.toISOString().split('T')[0];
  };

  const resetForm = () => {
    setCertificationDetail({
      recipientName: "",
      certificationTitle: "",
      issuedOrganization: "",
      certificateId: "",
      durationOfTrainingInWeeks: 0,
      certificationScore: 0,
      certificateFileurl: "",
      issuedDate: new Date(),
      specialMessage: "",
    });
  };

  return (
    <div className="max-w-4xl mx-auto p-6 bg-stone-50 dark:bg-stone-900 rounded-lg shadow-lg">
      <h2 className="text-2xl font-bold text-orange-600 dark:text-orange-500 mb-6 flex items-center gap-2">
        <PiCertificate size={24} />
        Add New Certification
      </h2>
      
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Recipient Name */}
          <div className="space-y-1">
            <label className="block text-sm font-medium text-stone-700 dark:text-stone-300">
              Recipient Name
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <PiStudent className="h-5 w-5 text-stone-400" />
              </div>
              <input
                type="text"
                required
                value={certificationDetail.recipientName}
                onChange={(e) => handleChange("recipientName", e.target.value)}
                className="pl-10 w-full rounded-lg border border-stone-300 dark:border-stone-700 bg-stone-100 dark:bg-stone-800 py-2 px-3 text-stone-900 dark:text-stone-100 focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                placeholder="Enter recipient's full name"
              />
            </div>
          </div>

          {/* Certification Title */}
          <div className="space-y-1">
            <label className="block text-sm font-medium text-stone-700 dark:text-stone-300">
              Certification Title
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <PiCertificate className="h-5 w-5 text-stone-400" />
              </div>
              <input
                type="text"
                required
                value={certificationDetail.certificationTitle}
                onChange={(e) => handleChange("certificationTitle", e.target.value)}
                className="pl-10 w-full rounded-lg border border-stone-300 dark:border-stone-700 bg-stone-100 dark:bg-stone-800 py-2 px-3 text-stone-900 dark:text-stone-100 focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                placeholder="Enter certification title"
              />
            </div>
          </div>

          {/* Program Name */}
          <div className="space-y-1">
            <label className="block text-sm font-medium text-stone-700 dark:text-stone-300">
              Program Name
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <PiTextbox className="h-5 w-5 text-stone-400" />
              </div>
              <input
                type="text"
                required
                value={certificationDetail.programeName}
                onChange={(e) => handleChange("programeName", e.target.value)}
                className="pl-10 w-full rounded-lg border border-stone-300 dark:border-stone-700 bg-stone-100 dark:bg-stone-800 py-2 px-3 text-stone-900 dark:text-stone-100 focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                placeholder="Enter program name"
              />
            </div>
          </div>

          {/* Issued Organization */}
          <div className="space-y-1">
            <label className="block text-sm font-medium text-stone-700 dark:text-stone-300">
              Issued Organization
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <PiTextbox className="h-5 w-5 text-stone-400" />
              </div>
              <input
                type="text"
                required
                value={certificationDetail.issuedOrganization}
                onChange={(e) => handleChange("issuedOrganization", e.target.value)}
                className="pl-10 w-full rounded-lg border border-stone-300 dark:border-stone-700 bg-stone-100 dark:bg-stone-800 py-2 px-3 text-stone-900 dark:text-stone-100 focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                placeholder="Enter issuing organization"
              />
            </div>
          </div>

          {/* Certificate ID */}
          <div className="space-y-1">
            <label className="block text-sm font-medium text-stone-700 dark:text-stone-300">
              Certificate ID
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <PiTextbox className="h-5 w-5 text-stone-400" />
              </div>
              <input
                type="text"
                value={certificationDetail.certificateId}
                onChange={(e) => handleChange("certificateId", e.target.value)}
                className="pl-10 w-full rounded-lg border border-stone-300 dark:border-stone-700 bg-stone-100 dark:bg-stone-800 py-2 px-3 text-stone-900 dark:text-stone-100 focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                placeholder="Enter certificate ID"
              />
            </div>
          </div>

          {/* Authority Signature */}
          <div className="space-y-1">
            <label className="block text-sm font-medium text-stone-700 dark:text-stone-300">
              Authority Signature
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <PiSignature className="h-5 w-5 text-stone-400" />
              </div>
              <input
                type="text"
                value={certificationDetail.authoritySignature}
                onChange={(e) => handleChange("authoritySignature", e.target.value)}
                className="pl-10 w-full rounded-lg border border-stone-300 dark:border-stone-700 bg-stone-100 dark:bg-stone-800 py-2 px-3 text-stone-900 dark:text-stone-100 focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                placeholder="Enter authority signature"
              />
            </div>
          </div>

          {/* Completion Criteria */}
          <div className="space-y-1">
            <label className="block text-sm font-medium text-stone-700 dark:text-stone-300">
              Completion Criteria
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <PiTextbox className="h-5 w-5 text-stone-400" />
              </div>
              <input
                type="text"
                value={certificationDetail.completionCriteria}
                onChange={(e) => handleChange("completionCriteria", e.target.value)}
                className="pl-10 w-full rounded-lg border border-stone-300 dark:border-stone-700 bg-stone-100 dark:bg-stone-800 py-2 px-3 text-stone-900 dark:text-stone-100 focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                placeholder="Enter completion criteria"
              />
            </div>
          </div>

          {/* Duration of Training (Weeks) */}
          <div className="space-y-1">
            <label className="block text-sm font-medium text-stone-700 dark:text-stone-300">
              Duration (Weeks)
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <PiTextbox className="h-5 w-5 text-stone-400" />
              </div>
              <input
                type="number"
                min="0"
                value={certificationDetail.durationOfTrainingInWeeks}
                onChange={(e) => handleChange("durationOfTrainingInWeeks", parseInt(e.target.value) || 0)}
                className="pl-10 w-full rounded-lg border border-stone-300 dark:border-stone-700 bg-stone-100 dark:bg-stone-800 py-2 px-3 text-stone-900 dark:text-stone-100 focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                placeholder="Enter duration in weeks"
              />
            </div>
          </div>

          {/* Certification Score */}
          <div className="space-y-1">
            <label className="block text-sm font-medium text-stone-700 dark:text-stone-300">
              Certification Score
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <PiTextbox className="h-5 w-5 text-stone-400" />
              </div>
              <input
                type="number"
                min="0"
                value={certificationDetail.certificationScore}
                onChange={(e) => handleChange("certificationScore", parseInt(e.target.value) || 0)}
                className="pl-10 w-full rounded-lg border border-stone-300 dark:border-stone-700 bg-stone-100 dark:bg-stone-800 py-2 px-3 text-stone-900 dark:text-stone-100 focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                placeholder="Enter certification score"
              />
            </div>
          </div>

          {/* Verification Link */}
          <div className="space-y-1">
            <label className="block text-sm font-medium text-stone-700 dark:text-stone-300">
              Verification Link
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <PiLink className="h-5 w-5 text-stone-400" />
              </div>
              <input
                type="url"
                value={certificationDetail.verificationLink}
                onChange={(e) => handleChange("verificationLink", e.target.value)}
                className="pl-10 w-full rounded-lg border border-stone-300 dark:border-stone-700 bg-stone-100 dark:bg-stone-800 py-2 px-3 text-stone-900 dark:text-stone-100 focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                placeholder="Enter verification URL"
              />
            </div>
          </div>

          {/* Certificate File URL */}
          <div className="space-y-1">
            <label className="block text-sm font-medium text-stone-700 dark:text-stone-300">
              Certificate File URL
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <PiLink className="h-5 w-5 text-stone-400" />
              </div>
              <input
                type="url"
                value={certificationDetail.certificateFileurl}
                onChange={(e) => handleChange("certificateFileurl", e.target.value)}
                className="pl-10 w-full rounded-lg border border-stone-300 dark:border-stone-700 bg-stone-100 dark:bg-stone-800 py-2 px-3 text-stone-900 dark:text-stone-100 focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                placeholder="Enter certificate file URL"
              />
            </div>
          </div>

          {/* Issued Date */}
          <div className="space-y-1">
            <label className="block text-sm font-medium text-stone-700 dark:text-stone-300">
              Issued Date
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <PiCalendar className="h-5 w-5 text-stone-400" />
              </div>
              <input
                type="date"
                required
                value={formatDateForInput(certificationDetail.issuedDate)}
                onChange={(e) => handleDateChange(e.target.value)}
                className="pl-10 w-full rounded-lg border border-stone-300 dark:border-stone-700 bg-stone-100 dark:bg-stone-800 py-2 px-3 text-stone-900 dark:text-stone-100 focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />
            </div>
          </div>

          {/* Special Message */}
          <div className="md:col-span-2 space-y-1">
            <label className="block text-sm font-medium text-stone-700 dark:text-stone-300">
              Special Message
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 pt-3 flex items-start pointer-events-none">
                <PiNote className="h-5 w-5 text-stone-400" />
              </div>
              <textarea
                value={certificationDetail.specialMessage}
                onChange={(e) => handleChange("specialMessage", e.target.value)}
                className="pl-10 w-full rounded-lg border border-stone-300 dark:border-stone-700 bg-stone-100 dark:bg-stone-800 py-2 px-3 text-stone-900 dark:text-stone-100 focus:ring-2 focus:ring-orange-500 focus:border-transparent min-h-[100px]"
                placeholder="Enter any special message"
              />
            </div>
          </div>
        </div>

        <div className="flex justify-end gap-4 pt-4">
          <button
            type="button"
            onClick={resetForm}
            className="px-4 py-2 rounded-lg bg-stone-200 dark:bg-stone-700 text-stone-800 dark:text-stone-200 hover:bg-stone-300 dark:hover:bg-stone-600 transition-colors"
          >
            Reset
          </button>
          <button
            type="submit"
            className="px-4 py-2 rounded-lg bg-orange-600 text-white hover:bg-orange-700 transition-colors"
          >
            Add Certification
          </button>
        </div>
      </form>
    </div>
  );
}